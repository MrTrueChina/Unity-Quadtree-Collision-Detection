//TODO：
//这个.cs用于记录可能出现的方案和对应的灵感

/*
 *  Quadtree:
 *    核心问题：
 *      更新时刻：
 *        Unity自带的物理碰撞检测以物理更新频率为基准进行检测（FixedUpdate），这是为了保证物理系统的准确性而选择的方案
 *        四叉树碰撞检测就是通过削减物理部分来在速度上超越自带物理碰撞，如此可以考虑将四叉树的碰撞改到Update之中
 *      碰撞检测发出方：
 *        发出方有两种方案：在碰撞器发出 / 在四叉树发出
 *        如果在碰撞器发出，不需要任何额外设计，缺点是更新和检测的顺序无法保证
 *        如果在四叉树发出，优点是检测可以保证在更新完成后进行，缺点是需要遍历整棵树寻找检测器或维护一个检测器列表
 *        可以考虑在接口中增加是否检测碰撞的设置方法，以此更新四叉树中的检测器列表
 *      分割时刻：
 *        分割时刻有两种方案：在存入碰撞器时分割 / 在更新时分割
 *        首先分割之前都需要先更新碰撞器位置，否则会发生分割前有碰撞器移出节点范围导致分割后碰撞器无法正常下发给子节点的bug
 *        如果使用存入时分割则会带来一个问题：存入前的更新导致碰撞器存入另一个节点，导致另一个节点也进行更新，另一个节点更新的同时又有一个碰撞器进入了这个节点导致了这个节点的更新，两个节点互相触发更新导致大量多余更新
 *        这个问题可以通过先把所有节点取出来，等分割完毕后再存入树的方式解决
 *        如果使用更新时分割则不会产生这个问题，但对应的会带来新的问题：每次更新都会造成一次分割判断，绝大多数都会是false
 *        可以考虑使用
 *      半径更新时刻：
 *        存入移除时更新 / 每帧更新一次
 *      事件订阅问题:
 *        碰撞事件无论检测发起方是谁，必然要由检测器向其他组件传达，为了减轻耦合应该使用面向接口的开发方式，实现碰撞检测接口来达到检测效果
 *        直接通过检测器在四叉树中添加订阅？
 *        通过订阅查看订阅脚本是否存在？
 *        不直接订阅而是在检测器中维护一个脚本应用List用于检测检测器是否存在？
 *    数据问题:
 *      Transform:
 *        Transform获取到的所有属性都要是世界空间的，不能用相对空间的
 */